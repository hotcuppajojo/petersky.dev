# deploy.yml
name: Build and Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the latest code from the 'main' branch.
      #    Ensures the workflow operates on the latest code changes.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Cache the Rust toolchain to speed up builds.
      #    Reuse the toolchain if 'Cargo.lock' hasn't changed.
      #    This reduces toolchain installation time.
      - name: Cache Rust toolchain
        id: rust-cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            rust-toolchain-${{ runner.os }}-

      # 3. Remove existing installations of rust-analyzer, rustfmt, and cargo-fmt if they are not managed by rustup.
      #    This ensures the tools are managed by rustup for future updates.
      - name: Clean up existing Rust tools
        if: steps.rust-cache.outputs.cache-hit != 'true'
        run: |
          rm -f ~/.cargo/bin/rust-analyzer
          rm -f ~/.cargo/bin/rustfmt
          rm -f ~/.cargo/bin/cargo-fmt

      # 4. Install Rust toolchain and components.
      #    Ensures all required components are available for building.
      - name: Install Rust toolchain and components
        run: |
          rustup toolchain install stable
          rustup default stable
          rustup component add rust-analyzer
          rustup component add rustfmt

      # 5. Cache the wasm32-unknown-unknown target to speed up builds.
      #    Reuse the target if it hasn't changed.
      - name: Cache wasm32 target
        id: wasm32-cache
        uses: actions/cache@v4
        with:
          path: ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/wasm32-unknown-unknown
          key: wasm32-target-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            wasm32-target-${{ runner.os }}-

      # 6. Install wasm32-unknown-unknown target if it's not cached.
      #    Adds the WebAssembly target for building the site.
      #    We need to run separate checks for the target.
      - name: Install wasm32-unknown-unknown target
        if: steps.wasm32-cache.outputs.cache-hit != 'true'
        run: rustup target add wasm32-unknown-unknown

      # 7. Verify wasm32-unknown-unknown target installation
      #    Ensures the target is installed correctly.
      - name: Verify wasm32-unknown-unknown target
        run: rustup target list --installed

      # 8. Cache the Cargo registry and index to minimize network usage.
      #    Helps avoid downloading dependencies repeatedly.
      - name: Cache Cargo registry and index
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      # 9. Cache Leptos CLI to avoid reinstalling on every run.
      #    Uses version-specific cache to ensure compatibility.
      - name: Cache Leptos CLI
        id: leptos-cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-leptos
          key: leptos-cli-${{ runner.os }}-v0.6.15
          restore-keys: |
            leptos-cli-${{ runner.os }}-

      # 10. Install Leptos CLI if it's not in the cache.
      #     Guarantees the CLI is available for the build process.
      - name: Install Leptos CLI
        if: steps.leptos-cache.outputs.cache-hit != 'true'
        run: cargo install --locked cargo-leptos

      # 11. Cache Trunk to avoid unnecessary reinstalls.
      #     Improves efficiency by storing the compiled Trunk binary.
      - name: Cache Trunk
        id: trunk-cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/trunk
          key: trunk-cli-${{ runner.os }}-v0.20.3
          restore-keys: |
            trunk-cli-${{ runner.os }}-

      # 12. Install Trunk if it's not cached.
      #     Required for building the static site assets.
      - name: Install Trunk for static assets
        if: steps.trunk-cache.outputs.cache-hit != 'true'
        run: cargo install trunk
    
  build:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      # 1. Check out the latest code from the 'main' branch.
      #    Ensures the workflow operates on the latest code changes.
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # 2. Setup Node.js environment.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # 3. Cache npm global packages to speed up installations.
      - name: Cache npm global packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-

      # 4. Install Sass globally using npm.
      - name: Install Sass
        if: steps.cache-npm-global.outputs.cache-hit != 'true'
        run: npm install -g sass

      # 5. Verify Sass installation.
      - name: Verify Sass installation
        run: |
          which sass
          sass --version

      # 6. Compile SCSS to CSS.
      - name: Compile SCSS
        run: sass style/main.scss style/main.css

      # 7. Create the 'target/site' directory if it doesn't exist.
      #    Prepares the directory structure for the build output.
      - name: Ensure target/site directory exists
        run: mkdir -p target/site

      # 8. Build the Leptos site using Trunk in release mode.
      #    Produces optimized assets for deployment.
      - name: Build Leptos site for CSR with Trunk
        run: trunk build --release

      # 9. Move the compiled CSS to the deployment directory if needed.
      #    Ensures the CSS file is available in the target output.
      - name: Move Compiled CSS to Deployment Directory
        run: |
          mkdir -p target/site/pkg/style
          cp style/main.css target/site/pkg/style/

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 1. Check out the latest code from the 'main' branch.
      #    Ensures the workflow operates on the latest code changes.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Deploy the built site to the 'gh-pages' branch.
      #    Publishes the contents of 'target/site/pkg' to GitHub Pages.
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/site/pkg