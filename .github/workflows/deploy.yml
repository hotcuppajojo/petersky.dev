name: Build and Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Always check out the latest commit in the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Cache the Rust toolchain to avoid redundant installation
      #    The cache key depends on the OS and Rust toolchain version; the cache is reused
      #    as long as the `Cargo.lock` file remains unchanged. This speeds up build times.
      - name: Cache Rust toolchain
        id: rust-cache
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            rust-toolchain-${{ runner.os }}-

      # 3. Only install the Rust toolchain if it is not cached.
      - name: Install Rust toolchain
        if: steps.rust-cache.outputs.cache-hit != 'true'
        run: |
          rustup toolchain install stable
          rustup default stable
          rustup target add wasm32-unknown-unknown

      # 4. Cache the Cargo registry and index for package management efficiency.
      #    Cache invalidation occurs when `Cargo.lock` changes, indicating a dependency update.
      - name: Cache Cargo registry and index
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      # 5. Cache Leptos CLI installation
      - name: Cache Leptos CLI
        id: leptos-cache
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/leptos
          key: leptos-cli-${{ runner.os }}-v0.6.15
          restore-keys: |
            leptos-cli-${{ runner.os }}-

      # 6. Check if Leptos CLI cache was hit
      - name: Check Leptos CLI Cache
        env:
          LEPTOS_CACHE_HIT: ${{ steps.leptos-cache.outputs.cache-hit }}
        run: | 
            echo "Leptos CLI cache hit: $LEPTOS_CACHE_HIT"

      # 7. Install Leptos CLI only if not cached
      - name: Install Leptos CLI
        if: steps.leptos-cache.outputs.cache-hit != 'true'
        run: cargo install --locked cargo-leptos

      # 8. Manually cache the installed Leptos CLI
      - name: Save Leptos CLI cache
        if: steps.leptos-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.cargo/bin
          cp -r ~/.cargo/bin/leptos ~/.cargo/bin/leptos_cache

      # 9. Cache Trunk for static site generation
      - name: Cache Trunk
        id: trunk-cache
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/trunk
          key: trunk-cli-${{ runner.os }}-v0.20.3
          restore-keys: |
            trunk-cli-${{ runner.os }}-

      # 10. Install Trunk for static site generation
      - name: Install Trunk for static assets
        if: steps.trunk-cache.outputs.cache-hit != 'true'
        run: cargo install trunk

      # 11. Ensure the target/site directory exists before the build process.
      - name: Ensure target/site directory exists
        run: mkdir -p target/site

      # 12. Build the Leptos app using Trunk
      - name: Build Leptos site for CSR with Trunk
        run: trunk build --release

      # 13. Debug step to list output directory contents
      - name: List build output directory
        run: ls -R target/site

      # 14. Check for output files and move them to the root
      - name: Move build output to root
        run: |
          if [ ! -d "target/site" ]; then
            echo "Build output not found! Exiting."
            exit 1
          fi
          rsync -a target/site/ target/site/

      # 15. Generate the index.html dynamically for deployment
      - name: Create index.html for deployment
        run: |
          cat > target/site/index.html <<EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Petersky Dev</title>
              <link rel="stylesheet" href="pkg/petersky-dev.css">
          </head>
          <body>
              <div id="root"></div>
              <script type="module" src="pkg/petersky-dev.js"></script>
          </body>
          </html>
          EOF

      # 16. Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/site