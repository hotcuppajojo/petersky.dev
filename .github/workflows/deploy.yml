# deploy.yml
name: Build and Deploy to GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the latest code from the 'main' branch.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Install Rust manually using rustup.
      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # 3. Cache the Rust toolchain and dependencies to speed up builds.
      - name: Cache Rust Toolchain and Dependencies
        id: rust-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            ~/.rustup
          key: rust-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-${{ runner.os }}-

      # 4. Install Rust components and wasm32 target if cache miss.
      - name: Install Rust Components and wasm32 Target
        if: steps.rust-cache.outputs.cache-hit != 'true'
        run: |
          rustup component add rust-analyzer
          rustup component add rustfmt
          rustup target add wasm32-unknown-unknown

      # 5. Verify wasm32-unknown-unknown target installation.
      - name: Verify wasm32 Target Installation
        run: rustup target list --installed | grep wasm32-unknown-unknown

      # 6. Cache Cargo registry and Git index to minimize network usage.
      - name: Cache Cargo Registry and Git Index
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-

      # 7. Cache Leptos CLI to avoid reinstalling on every run.
      - name: Cache Leptos CLI
        id: leptos-cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-leptos
          key: leptos-cli-${{ runner.os }}-v0.6.15
          restore-keys: |
            leptos-cli-${{ runner.os }}-

      # 8. Install Leptos CLI if it's not cached.
      - name: Install Leptos CLI
        if: steps.leptos-cache.outputs.cache-hit != 'true'
        run: cargo install --locked cargo-leptos

      # 9. Cache Trunk to avoid unnecessary reinstalls.
      - name: Cache Trunk
        id: trunk-cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/trunk
          key: trunk-cli-${{ runner.os }}-v0.20.3
          restore-keys: |
            trunk-cli-${{ runner.os }}-

      # 10. Install Trunk if it's not cached.
      - name: Install Trunk for Static Assets
        if: steps.trunk-cache.outputs.cache-hit != 'true'
        run: cargo install trunk

      # 11. Verify Trunk installation.
      - name: Verify Trunk Installation
        run: trunk --version

      # 12. Set up Node.js environment.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Specify the desired Node.js version.
          cache: 'npm'         # Enables automatic caching of npm dependencies.

      # 13. Cache npm global packages to speed up installations.
      - name: Cache npm Global Packages
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-global-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-global-${{ runner.os }}-

      # 14. Install Sass globally using npm if cache miss.
      - name: Install Sass
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm install -g sass

      # 15. Verify Sass installation.
      - name: Verify Sass Installation
        run: |
          which sass
          sass --version

      # 16. Lint the Rust codebase.
      - name: Lint Rust Codebase
        run: cargo fmt -- --check

      # 17. Run Rust tests.
      - name: Run Rust Tests
        run: cargo test --release

      # 18. Compile SCSS to CSS.
      - name: Compile SCSS to CSS
        run: sass style/main.scss style/main.css

      # 19. Ensure the 'target/site' directory exists.
      - name: Ensure target/site Directory Exists
        run: mkdir -p target/site

      # 20. Build the Leptos site using Trunk in release mode.
      - name: Build Leptos Site with Trunk
        run: trunk build --release

      # 21. Move the compiled CSS to the deployment directory.
      - name: Move Compiled CSS to Deployment Directory
        run: |
          mkdir -p target/site/pkg/style
          cp style/main.css target/site/pkg/style/

      # 22. Deploy the built site to GitHub Pages.
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/site/pkg