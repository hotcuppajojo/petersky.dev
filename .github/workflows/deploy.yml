# deploy.yml
name: Build and Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the latest code from the 'main' branch.
      #    Ensures the workflow operates on the latest code changes.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Cache the Rust toolchain to speed up builds.
      #    Reuse the toolchain if 'Cargo.lock' hasn't changed.
      #    This reduces toolchain installation time.
      - name: Cache Rust toolchain
        id: rust-cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            rust-toolchain-${{ runner.os }}-
      
      # 3. Remove existing installations of rust-analyzer, rustfmt, and cargo-fmt if they are not managed by rustup.
      #    This ensures the tools are managed by rustup for future updates.
      - name: Clean up existing Rust tools
        run: |
          rm -f ~/.cargo/bin/rust-analyzer
          rm -f ~/.cargo/bin/rustfmt
          rm -f ~/.cargo/bin/cargo-fmt

      # 4. Install Rust and the WebAssembly target.
      #    Ensures all required components are available for building.
      - name: Install Rust toolchain and wasm32 target
        run: |
          rustup toolchain install stable
          rustup default stable
          rustup component add rust-analyzer
          rustup component add rustfmt
          rustup target add wasm32-unknown-unknown

      # 5. Cache the Cargo registry and index to minimize network usage.
      #    Helps avoid downloading dependencies repeatedly.
      - name: Cache Cargo registry and index
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      # 6. Cache Leptos CLI to avoid reinstalling on every run.
      #    Uses version-specific cache to ensure compatibility.
      - name: Cache Leptos CLI
        id: leptos-cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-leptos
          key: leptos-cli-${{ runner.os }}-v0.6.15
          restore-keys: |
            leptos-cli-${{ runner.os }}-

      # 7. Install Leptos CLI if it's not in the cache.
      #    Guarantees the CLI is available for the build process.
      - name: Install Leptos CLI
        if: steps.leptos-cache.outputs.cache-hit != 'true'
        run: cargo install --locked cargo-leptos

      # 8. Cache Trunk to avoid unnecessary reinstalls.
      #    Improves efficiency by storing the compiled Trunk binary.
      - name: Cache Trunk
        id: trunk-cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/trunk
          key: trunk-cli-${{ runner.os }}-v0.20.3
          restore-keys: |
            trunk-cli-${{ runner.os }}-

      # 9. Install Trunk if it's not cached.
      #    Required for building the static site assets.
      - name: Install Trunk for static assets
        if: steps.trunk-cache.outputs.cache-hit != 'true'
        run: cargo install trunk

      # 10. Query the path for Sass and save it as an environment variable.
      #     Debug step that may be removed in the final workflow.
      #- name: Query Sass path and save as environment variable
      #  id: query-sass-path
      #  run: |
      #    SASS_PATH=$(npm root -g || echo "~/.npm")
      #    echo "SASS_PATH=$SASS_PATH" >> $GITHUB_ENV

      # 11 Verify Sass path status for proper cleanup.
      #   Debug step that may be removed in the final workflow.
      #- name: Verify Sass path
      #  run: |
      #    if [ ! -d "${{ env.SASS_PATH }}" ]; then
      #      echo "Sass path ${{ env.SASS_PATH }} does not exist. Creating it."
      #      mkdir -p ${{ env.SASS_PATH }}
      #    fi
          
      # 10. Cache Sass to avoid reinstalling.
      #    Stores the Sass binary for faster compilation.
      - name: Cache Sass
        id: sass-cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: sass-${{ runner.os }}-v1.62.1
          restore-keys: |
            sass-${{ runner.os }}-

      # 11. Install Sass if it's not cached.
      # Required for compiling SCSS to CSS.
      - name: Install Sass
        if: steps.sass-cache.outputs.cache-hit != 'true'
        run: npm install -g sass --prefix ~/.cargo

      # 12. Compile SCSS to CSS.
      # Converts the SCSS files to CSS for the site.
      - name: Compile SCSS
        run: ~/.cargo/bin/sass style/main.scss style/main.css

      # 13. Create the 'target/site' directory if it doesn't exist.
      #    Prepares the directory structure for the build output.
      - name: Ensure target/site directory exists
        run: mkdir -p target/site

      # 14. Build the Leptos site using Trunk in release mode.
      #     Produces optimized assets for deployment.
      - name: Build Leptos site for CSR with Trunk
        run: trunk build --release

      # 15. Move the compiled CSS to the deployment directory if needed.
      #     Ensures the CSS file is available in the target output.
      - name: Move Compiled CSS to Deployment Directory
        run: |
          mkdir -p target/site/pkg/style
          cp style/main.css target/site/pkg/style/

      # 16. Deploy the built site to the 'gh-pages' branch.
      #     Publishes the contents of 'target/site/pkg' to GitHub Pages.
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/site/pkg